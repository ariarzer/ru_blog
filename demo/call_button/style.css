body {
    background-color: black;
}

main {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: min-content;
}

:root {
    --blue: #00e2f0;
    --blue50: #00e2f088;
    color: white;
    font-size: min(25vw, 25vh);
}

.stage {
    position: relative;

    transform-style: preserve-3d;
    perspective: 550px;
    transform: rotateZ(-10deg) rotateY(30deg) rotateX(20deg);
}

.phone {
    font-size: inherit;
    width: 1em;
    height: 1em;
    border-radius: 50%;
    background-color: transparent;
    border: 0.035em solid var(--blue);
    position: relative;

    display: flex;
    align-items: center;
    justify-content: center;
}

.phone_bg {
    position: absolute;
    inset: 0;
    background-image: radial-gradient(var(--blue50) 20%, transparent 20%);
    background-size: 0.05em 0.05em;
    border-radius: 50%;
}

.phone img {
    vertical-align: top;
    line-height: 1em;
}

.rounded {
    position: relative;
}

.rounded::after,
.rounded::before {
    z-index: -1;
    content: '';
    position: absolute;
    inset: -10%;
    border-radius: 50%;
    background-image: radial-gradient(black 60%, transparent 60%), conic-gradient(
            var(--blue50) 40deg, transparent 40deg, transparent 180deg,
            var(--blue50) 180deg, var(--blue50) 220deg, transparent 220deg);

    animation-name: rotate;
    animation-duration: 5s;
    animation-timing-function: linear;
    animation-iteration-count: infinite;

    filter: drop-shadow(0 0 10px var(--blue));
}

.rounded > .rounded {
    position: absolute;
    border: none;
}

.rounded > .rounded::after,
.rounded > .rounded::before {
    inset: -0.12em;
    background-image: radial-gradient(black 57%, transparent 57%), conic-gradient(
            var(--blue50) 60deg, transparent 60deg, transparent 180deg,
            var(--blue50) 180deg, var(--blue50) 240deg, transparent 240deg);
    filter: none;
}

.rounded::before {
    animation-delay: -5s;
    animation-direction: reverse;
    animation-duration: 15s;
}

.rounded >.rounded::after {
    animation-delay: -3s;
    animation-duration: 10s;
}

.rounded >.rounded::before {
    animation-delay: -20s;
    animation-duration: 30s;
}

@keyframes rotate {
    to {
        transform: rotate(360deg);
    }
}

.circle_wrap {
    position: absolute;
    top: 0;
    left: 0;
}

.circle_wrap {
    display: contents;
    transform-style: preserve-3d;
    perspective: 550px;
}

.circle {
    position: absolute;
    border: 0.01em solid var(--blue);
    box-shadow:
            0 0 10px 1px var(--blue),
            inset 0 0 10px 1px var(--blue);
    border-radius: 50%;

    transform: translateZ(calc(var(--n) * -20px));

    --size-add: 0.5em;
    --size-addition: 0.2em;
    --size: calc(var(--n) * var(--size-add) + 1em + var(--size-addition));

    height: var(--size);
    width: var(--size);

    --top: calc(var(--n) * (var(--size-add) / -2) - var(--size-addition) / 2);
    top: var(--top);
    left: var(--top);

    animation-name: bounceZ;
    animation-duration: 4s;
    animation-iteration-count: infinite;
    animation-delay: calc(var(--n) * 0.3s);
}

@keyframes bounceZ {
    50% {
        transform: translateZ(calc(var(--n) * -0.15em));
    }
}

.circle .img_wrap {
    --count: 3;
    --angle_step: calc(360 / var(--count));

    position: absolute;
    height: 0.3em;
    width: 0.3em;

    top: calc(var(--size) / 2 - 0.15em);
    left: -0.15em;
    transform-origin: calc(var(--size) / 2 + 0.15em);

    --angle: 0;

    transform: rotate(calc(var(--angle_step) * 1deg * var(--n) + var(--angle) * 1deg ));

    background-color: black;
    border-radius: 50%;

    display: flex;
    align-items: center;
    justify-content: center;

    animation-name: rotateCircle;
    animation-duration: 20s;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
}

@keyframes rotateCircle {
    to { --angle: 360; }
}

@property --angle {
    syntax: "<number>";
    inherits: true;
    initial-value: 0;
}

.circle:nth-child(1) { --n: 1; }
.circle:nth-child(2) { --n: 2; }
.circle:nth-child(3) { --n: 3; }

.circle img {
    display: block;
    transform: rotate(calc(var(--angle_step) * var(--n) * -1deg - var(--angle) * 1deg ));
    height: 90%;
    width: 90%;
}
